#!/usr/bin/env python
PACKAGE = "pg_editor"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

fil = gen.add_group("File")
fil.add("filename", str_t, 0, "Filename for save or load of graph data", "")
fil.add("save", bool_t, 0, "Save graph data as file", False)
fil.add("load", bool_t, 0, "Load graph data from file", False)
fil.add("upload", bool_t, 0, "Upload graph raw data to MBM server", False)

opt = gen.add_group("Optimization")
opt.add("max_iteration",    int_t,    1, "Maximum number of iteration in graph optimization process", 100,  10, 10000)
opt.add("max_num_bases",    int_t,    1, "Maximum number of bases of search space during solving trust region subproblem", 2, 2, 100)
opt.add("ignore_reliability", bool_t, 0, "Ignore reliability of each factor when optimizing", False)
opt.add("use_exact_hessian", bool_t, 0, "Optimize with exact Hessian of each factor", False)
opt.add("with_calibration", bool_t, 0, "Optimize with sensor calibration", False)

cost = opt.add_group("Cost", type="collapse", state=False)
cost_type_enum = gen.enum([ gen.const("Squared", int_t, 0, "Squared"),
                            gen.const("Absolute", int_t, 1, "Absolute"),
                            gen.const("PseudoHuber", int_t, 2, "PseudoHuber"),
                            gen.const("Huber", int_t, 3, "Huber"),
                            gen.const("DCS", int_t, 4, "DynamicCovarianceScaling"),
                            gen.const("SwitchableNormal", int_t, 5, "SwitchableNormal"),
                            gen.const("SwitchableGamma", int_t, 6, "SwitchableGamma"),
                            gen.const("SwitchableBeta", int_t, 7, "SwitchableBeta")],
                          "An enum of cost type")
cost.add("cost_type", int_t, 0, "Cost type of factors", 0, 0, 7, edit_method=cost_type_enum)
cost.add("huber_slope", double_t,   0, "Slope for huber-type costs", 0.5, 0.01, 100)
cost.add("switch_variance", double_t,   0, "Hyperparameter of prior distribution for DCS & SwitchableNormal option", 1.0, 0.01, 100)
cost.add("switch_alpha_beta", double_t,   0, "Hyperparameter of prior distribution for SwitchableBeta option", 1.0, 0.01, 10)

newton_trustregion = opt.add_group("Newton TrustRegion", type="collapse", state=False)
newton_trustregion.add("max_radius", double_t, 1, "Maximum radius of trust region", 1000, 10, 100000)
newton_trustregion.add("eta1", double_t, 1, "Minimum reduction ratio to accept current update", 0.2, 0, 1)
newton_trustregion.add("eta2", double_t, 1, "Minimum reduction ratio to accept current radius", 0.25, 0, 1)
newton_trustregion.add("eta3", double_t, 1, "Minimum reduction ratio to enlarge radius", 0.75, 0, 1)
newton_trustregion.add("t1", double_t, 1, "Radius decrease ratio", 0.25, 0, 1)
newton_trustregion.add("t2", double_t, 1, "Radius increase ratio", 2, 1, 10)
newton_trustregion.add("t3", double_t, 1, "Minimum ratio of norm of update to radius to enlarge radius", 0.9, 0, 1)

vis = gen.add_group("Visualization")
vis.add("max_chi2_factor", double_t, 0, "Maximum chi2 value of factors in the graph for coloring marker", 1, 0, 100)

exit(gen.generate(PACKAGE, "mapper_server", "MapperServer"))
